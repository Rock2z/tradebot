// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.14.0
// source: tb.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Stock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quote *YahooQuote `protobuf:"bytes,1,opt,name=quote,proto3" json:"quote,omitempty"`
}

func (x *Stock) Reset() {
	*x = Stock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stock) ProtoMessage() {}

func (x *Stock) ProtoReflect() protoreflect.Message {
	mi := &file_tb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stock.ProtoReflect.Descriptor instead.
func (*Stock) Descriptor() ([]byte, []int) {
	return file_tb_proto_rawDescGZIP(), []int{0}
}

func (x *Stock) GetQuote() *YahooQuote {
	if x != nil {
		return x.Quote
	}
	return nil
}

type YahooQuote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language                          string  `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
	Region                            string  `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	QuoteType                         string  `protobuf:"bytes,3,opt,name=quoteType,proto3" json:"quoteType,omitempty"`
	TypeDisp                          string  `protobuf:"bytes,4,opt,name=typeDisp,proto3" json:"typeDisp,omitempty"`
	QuoteSourceName                   string  `protobuf:"bytes,5,opt,name=quoteSourceName,proto3" json:"quoteSourceName,omitempty"`
	Triggerable                       bool    `protobuf:"varint,6,opt,name=triggerable,proto3" json:"triggerable,omitempty"`
	CustomPriceAlertConfidence        string  `protobuf:"bytes,7,opt,name=customPriceAlertConfidence,proto3" json:"customPriceAlertConfidence,omitempty"`
	Currency                          string  `protobuf:"bytes,8,opt,name=currency,proto3" json:"currency,omitempty"`
	MarketState                       string  `protobuf:"bytes,9,opt,name=marketState,proto3" json:"marketState,omitempty"`
	FirstTradeDateMilliseconds        uint64  `protobuf:"varint,10,opt,name=firstTradeDateMilliseconds,proto3" json:"firstTradeDateMilliseconds,omitempty"`
	PriceHint                         uint32  `protobuf:"varint,11,opt,name=priceHint,proto3" json:"priceHint,omitempty"`
	PostMarketChangePercent           float64 `protobuf:"fixed64,12,opt,name=postMarketChangePercent,proto3" json:"postMarketChangePercent,omitempty"`
	PostMarketTime                    uint32  `protobuf:"varint,13,opt,name=postMarketTime,proto3" json:"postMarketTime,omitempty"`
	PostMarketPrice                   float64 `protobuf:"fixed64,14,opt,name=postMarketPrice,proto3" json:"postMarketPrice,omitempty"`
	PostMarketChange                  float64 `protobuf:"fixed64,15,opt,name=postMarketChange,proto3" json:"postMarketChange,omitempty"`
	RegularMarketChange               float64 `protobuf:"fixed64,16,opt,name=regularMarketChange,proto3" json:"regularMarketChange,omitempty"`
	RegularMarketChangePercent        float64 `protobuf:"fixed64,17,opt,name=regularMarketChangePercent,proto3" json:"regularMarketChangePercent,omitempty"`
	RegularMarketTime                 uint32  `protobuf:"varint,18,opt,name=regularMarketTime,proto3" json:"regularMarketTime,omitempty"`
	RegularMarketPrice                float64 `protobuf:"fixed64,19,opt,name=regularMarketPrice,proto3" json:"regularMarketPrice,omitempty"`
	RegularMarketDayHigh              float64 `protobuf:"fixed64,20,opt,name=regularMarketDayHigh,proto3" json:"regularMarketDayHigh,omitempty"`
	RegularMarketDayRange             string  `protobuf:"bytes,21,opt,name=regularMarketDayRange,proto3" json:"regularMarketDayRange,omitempty"`
	RegularMarketDayLow               float64 `protobuf:"fixed64,22,opt,name=regularMarketDayLow,proto3" json:"regularMarketDayLow,omitempty"`
	RegularMarketVolume               uint32  `protobuf:"varint,23,opt,name=regularMarketVolume,proto3" json:"regularMarketVolume,omitempty"`
	RegularMarketPreviousClose        float64 `protobuf:"fixed64,24,opt,name=regularMarketPreviousClose,proto3" json:"regularMarketPreviousClose,omitempty"`
	Bid                               float64 `protobuf:"fixed64,25,opt,name=bid,proto3" json:"bid,omitempty"`
	Ask                               float64 `protobuf:"fixed64,26,opt,name=ask,proto3" json:"ask,omitempty"`
	BidSize                           uint32  `protobuf:"varint,27,opt,name=bidSize,proto3" json:"bidSize,omitempty"`
	AskSize                           uint32  `protobuf:"varint,28,opt,name=askSize,proto3" json:"askSize,omitempty"`
	FullExchangeName                  string  `protobuf:"bytes,29,opt,name=fullExchangeName,proto3" json:"fullExchangeName,omitempty"`
	FinancialCurrency                 string  `protobuf:"bytes,30,opt,name=financialCurrency,proto3" json:"financialCurrency,omitempty"`
	RegularMarketOpen                 float64 `protobuf:"fixed64,31,opt,name=regularMarketOpen,proto3" json:"regularMarketOpen,omitempty"`
	AverageDailyVolume3Month          uint32  `protobuf:"varint,32,opt,name=averageDailyVolume3Month,proto3" json:"averageDailyVolume3Month,omitempty"`
	AverageDailyVolume10Day           uint32  `protobuf:"varint,33,opt,name=averageDailyVolume10Day,proto3" json:"averageDailyVolume10Day,omitempty"`
	FiftyTwoWeekLowChange             float64 `protobuf:"fixed64,34,opt,name=fiftyTwoWeekLowChange,proto3" json:"fiftyTwoWeekLowChange,omitempty"`
	FiftyTwoWeekLowChangePercent      float64 `protobuf:"fixed64,35,opt,name=fiftyTwoWeekLowChangePercent,proto3" json:"fiftyTwoWeekLowChangePercent,omitempty"`
	FiftyTwoWeekRange                 string  `protobuf:"bytes,36,opt,name=fiftyTwoWeekRange,proto3" json:"fiftyTwoWeekRange,omitempty"`
	FiftyTwoWeekHighChange            float64 `protobuf:"fixed64,37,opt,name=fiftyTwoWeekHighChange,proto3" json:"fiftyTwoWeekHighChange,omitempty"`
	FiftyTwoWeekHighChangePercent     float64 `protobuf:"fixed64,38,opt,name=fiftyTwoWeekHighChangePercent,proto3" json:"fiftyTwoWeekHighChangePercent,omitempty"`
	FiftyTwoWeekLow                   float64 `protobuf:"fixed64,39,opt,name=fiftyTwoWeekLow,proto3" json:"fiftyTwoWeekLow,omitempty"`
	FiftyTwoWeekHigh                  float64 `protobuf:"fixed64,40,opt,name=fiftyTwoWeekHigh,proto3" json:"fiftyTwoWeekHigh,omitempty"`
	DividendDate                      uint32  `protobuf:"varint,41,opt,name=dividendDate,proto3" json:"dividendDate,omitempty"`
	EarningsTimestamp                 uint32  `protobuf:"varint,42,opt,name=earningsTimestamp,proto3" json:"earningsTimestamp,omitempty"`
	EarningsTimestampStart            uint32  `protobuf:"varint,43,opt,name=earningsTimestampStart,proto3" json:"earningsTimestampStart,omitempty"`
	EarningsTimestampEnd              uint32  `protobuf:"varint,44,opt,name=earningsTimestampEnd,proto3" json:"earningsTimestampEnd,omitempty"`
	TrailingAnnualDividendRate        float64 `protobuf:"fixed64,45,opt,name=trailingAnnualDividendRate,proto3" json:"trailingAnnualDividendRate,omitempty"`
	TrailingPE                        float64 `protobuf:"fixed64,46,opt,name=trailingPE,proto3" json:"trailingPE,omitempty"`
	TrailingAnnualDividendYield       float64 `protobuf:"fixed64,47,opt,name=trailingAnnualDividendYield,proto3" json:"trailingAnnualDividendYield,omitempty"`
	EpsTrailingTwelveMonths           float64 `protobuf:"fixed64,48,opt,name=epsTrailingTwelveMonths,proto3" json:"epsTrailingTwelveMonths,omitempty"`
	EpsForward                        float64 `protobuf:"fixed64,49,opt,name=epsForward,proto3" json:"epsForward,omitempty"`
	EpsCurrentYear                    float64 `protobuf:"fixed64,50,opt,name=epsCurrentYear,proto3" json:"epsCurrentYear,omitempty"`
	PriceEpsCurrentYear               float64 `protobuf:"fixed64,51,opt,name=priceEpsCurrentYear,proto3" json:"priceEpsCurrentYear,omitempty"`
	SharesOutstanding                 uint64  `protobuf:"varint,52,opt,name=sharesOutstanding,proto3" json:"sharesOutstanding,omitempty"`
	BookValue                         float64 `protobuf:"fixed64,53,opt,name=bookValue,proto3" json:"bookValue,omitempty"`
	FiftyDayAverage                   float64 `protobuf:"fixed64,54,opt,name=fiftyDayAverage,proto3" json:"fiftyDayAverage,omitempty"`
	FiftyDayAverageChange             float64 `protobuf:"fixed64,55,opt,name=fiftyDayAverageChange,proto3" json:"fiftyDayAverageChange,omitempty"`
	FiftyDayAverageChangePercent      float64 `protobuf:"fixed64,56,opt,name=fiftyDayAverageChangePercent,proto3" json:"fiftyDayAverageChangePercent,omitempty"`
	TwoHundredDayAverage              float64 `protobuf:"fixed64,57,opt,name=twoHundredDayAverage,proto3" json:"twoHundredDayAverage,omitempty"`
	TwoHundredDayAverageChange        float64 `protobuf:"fixed64,58,opt,name=twoHundredDayAverageChange,proto3" json:"twoHundredDayAverageChange,omitempty"`
	TwoHundredDayAverageChangePercent float64 `protobuf:"fixed64,59,opt,name=twoHundredDayAverageChangePercent,proto3" json:"twoHundredDayAverageChangePercent,omitempty"`
	MarketCap                         uint64  `protobuf:"varint,60,opt,name=marketCap,proto3" json:"marketCap,omitempty"`
	ForwardPE                         float64 `protobuf:"fixed64,61,opt,name=forwardPE,proto3" json:"forwardPE,omitempty"`
	PriceToBook                       float64 `protobuf:"fixed64,62,opt,name=priceToBook,proto3" json:"priceToBook,omitempty"`
	SourceInterval                    uint32  `protobuf:"varint,63,opt,name=sourceInterval,proto3" json:"sourceInterval,omitempty"`
	ExchangeDataDelayedBy             uint32  `protobuf:"varint,64,opt,name=exchangeDataDelayedBy,proto3" json:"exchangeDataDelayedBy,omitempty"`
	PageViewGrowthWeekly              float64 `protobuf:"fixed64,65,opt,name=pageViewGrowthWeekly,proto3" json:"pageViewGrowthWeekly,omitempty"`
	AverageAnalystRating              string  `protobuf:"bytes,66,opt,name=averageAnalystRating,proto3" json:"averageAnalystRating,omitempty"`
	Tradeable                         bool    `protobuf:"varint,67,opt,name=tradeable,proto3" json:"tradeable,omitempty"`
	Exchange                          string  `protobuf:"bytes,68,opt,name=exchange,proto3" json:"exchange,omitempty"`
	ShortName                         string  `protobuf:"bytes,69,opt,name=shortName,proto3" json:"shortName,omitempty"`
	LongName                          string  `protobuf:"bytes,70,opt,name=longName,proto3" json:"longName,omitempty"`
	MessageBoardId                    string  `protobuf:"bytes,71,opt,name=messageBoardId,proto3" json:"messageBoardId,omitempty"`
	ExchangeTimezoneName              string  `protobuf:"bytes,72,opt,name=exchangeTimezoneName,proto3" json:"exchangeTimezoneName,omitempty"`
	ExchangeTimezoneShortName         string  `protobuf:"bytes,73,opt,name=exchangeTimezoneShortName,proto3" json:"exchangeTimezoneShortName,omitempty"`
	GmtOffSetMilliseconds             int32   `protobuf:"varint,74,opt,name=gmtOffSetMilliseconds,proto3" json:"gmtOffSetMilliseconds,omitempty"`
	Market                            string  `protobuf:"bytes,75,opt,name=market,proto3" json:"market,omitempty"`
	EsgPopulated                      bool    `protobuf:"varint,76,opt,name=esgPopulated,proto3" json:"esgPopulated,omitempty"`
	DisplayName                       string  `protobuf:"bytes,77,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Symbol                            string  `protobuf:"bytes,78,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *YahooQuote) Reset() {
	*x = YahooQuote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YahooQuote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YahooQuote) ProtoMessage() {}

func (x *YahooQuote) ProtoReflect() protoreflect.Message {
	mi := &file_tb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YahooQuote.ProtoReflect.Descriptor instead.
func (*YahooQuote) Descriptor() ([]byte, []int) {
	return file_tb_proto_rawDescGZIP(), []int{1}
}

func (x *YahooQuote) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *YahooQuote) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *YahooQuote) GetQuoteType() string {
	if x != nil {
		return x.QuoteType
	}
	return ""
}

func (x *YahooQuote) GetTypeDisp() string {
	if x != nil {
		return x.TypeDisp
	}
	return ""
}

func (x *YahooQuote) GetQuoteSourceName() string {
	if x != nil {
		return x.QuoteSourceName
	}
	return ""
}

func (x *YahooQuote) GetTriggerable() bool {
	if x != nil {
		return x.Triggerable
	}
	return false
}

func (x *YahooQuote) GetCustomPriceAlertConfidence() string {
	if x != nil {
		return x.CustomPriceAlertConfidence
	}
	return ""
}

func (x *YahooQuote) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *YahooQuote) GetMarketState() string {
	if x != nil {
		return x.MarketState
	}
	return ""
}

func (x *YahooQuote) GetFirstTradeDateMilliseconds() uint64 {
	if x != nil {
		return x.FirstTradeDateMilliseconds
	}
	return 0
}

func (x *YahooQuote) GetPriceHint() uint32 {
	if x != nil {
		return x.PriceHint
	}
	return 0
}

func (x *YahooQuote) GetPostMarketChangePercent() float64 {
	if x != nil {
		return x.PostMarketChangePercent
	}
	return 0
}

func (x *YahooQuote) GetPostMarketTime() uint32 {
	if x != nil {
		return x.PostMarketTime
	}
	return 0
}

func (x *YahooQuote) GetPostMarketPrice() float64 {
	if x != nil {
		return x.PostMarketPrice
	}
	return 0
}

func (x *YahooQuote) GetPostMarketChange() float64 {
	if x != nil {
		return x.PostMarketChange
	}
	return 0
}

func (x *YahooQuote) GetRegularMarketChange() float64 {
	if x != nil {
		return x.RegularMarketChange
	}
	return 0
}

func (x *YahooQuote) GetRegularMarketChangePercent() float64 {
	if x != nil {
		return x.RegularMarketChangePercent
	}
	return 0
}

func (x *YahooQuote) GetRegularMarketTime() uint32 {
	if x != nil {
		return x.RegularMarketTime
	}
	return 0
}

func (x *YahooQuote) GetRegularMarketPrice() float64 {
	if x != nil {
		return x.RegularMarketPrice
	}
	return 0
}

func (x *YahooQuote) GetRegularMarketDayHigh() float64 {
	if x != nil {
		return x.RegularMarketDayHigh
	}
	return 0
}

func (x *YahooQuote) GetRegularMarketDayRange() string {
	if x != nil {
		return x.RegularMarketDayRange
	}
	return ""
}

func (x *YahooQuote) GetRegularMarketDayLow() float64 {
	if x != nil {
		return x.RegularMarketDayLow
	}
	return 0
}

func (x *YahooQuote) GetRegularMarketVolume() uint32 {
	if x != nil {
		return x.RegularMarketVolume
	}
	return 0
}

func (x *YahooQuote) GetRegularMarketPreviousClose() float64 {
	if x != nil {
		return x.RegularMarketPreviousClose
	}
	return 0
}

func (x *YahooQuote) GetBid() float64 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *YahooQuote) GetAsk() float64 {
	if x != nil {
		return x.Ask
	}
	return 0
}

func (x *YahooQuote) GetBidSize() uint32 {
	if x != nil {
		return x.BidSize
	}
	return 0
}

func (x *YahooQuote) GetAskSize() uint32 {
	if x != nil {
		return x.AskSize
	}
	return 0
}

func (x *YahooQuote) GetFullExchangeName() string {
	if x != nil {
		return x.FullExchangeName
	}
	return ""
}

func (x *YahooQuote) GetFinancialCurrency() string {
	if x != nil {
		return x.FinancialCurrency
	}
	return ""
}

func (x *YahooQuote) GetRegularMarketOpen() float64 {
	if x != nil {
		return x.RegularMarketOpen
	}
	return 0
}

func (x *YahooQuote) GetAverageDailyVolume3Month() uint32 {
	if x != nil {
		return x.AverageDailyVolume3Month
	}
	return 0
}

func (x *YahooQuote) GetAverageDailyVolume10Day() uint32 {
	if x != nil {
		return x.AverageDailyVolume10Day
	}
	return 0
}

func (x *YahooQuote) GetFiftyTwoWeekLowChange() float64 {
	if x != nil {
		return x.FiftyTwoWeekLowChange
	}
	return 0
}

func (x *YahooQuote) GetFiftyTwoWeekLowChangePercent() float64 {
	if x != nil {
		return x.FiftyTwoWeekLowChangePercent
	}
	return 0
}

func (x *YahooQuote) GetFiftyTwoWeekRange() string {
	if x != nil {
		return x.FiftyTwoWeekRange
	}
	return ""
}

func (x *YahooQuote) GetFiftyTwoWeekHighChange() float64 {
	if x != nil {
		return x.FiftyTwoWeekHighChange
	}
	return 0
}

func (x *YahooQuote) GetFiftyTwoWeekHighChangePercent() float64 {
	if x != nil {
		return x.FiftyTwoWeekHighChangePercent
	}
	return 0
}

func (x *YahooQuote) GetFiftyTwoWeekLow() float64 {
	if x != nil {
		return x.FiftyTwoWeekLow
	}
	return 0
}

func (x *YahooQuote) GetFiftyTwoWeekHigh() float64 {
	if x != nil {
		return x.FiftyTwoWeekHigh
	}
	return 0
}

func (x *YahooQuote) GetDividendDate() uint32 {
	if x != nil {
		return x.DividendDate
	}
	return 0
}

func (x *YahooQuote) GetEarningsTimestamp() uint32 {
	if x != nil {
		return x.EarningsTimestamp
	}
	return 0
}

func (x *YahooQuote) GetEarningsTimestampStart() uint32 {
	if x != nil {
		return x.EarningsTimestampStart
	}
	return 0
}

func (x *YahooQuote) GetEarningsTimestampEnd() uint32 {
	if x != nil {
		return x.EarningsTimestampEnd
	}
	return 0
}

func (x *YahooQuote) GetTrailingAnnualDividendRate() float64 {
	if x != nil {
		return x.TrailingAnnualDividendRate
	}
	return 0
}

func (x *YahooQuote) GetTrailingPE() float64 {
	if x != nil {
		return x.TrailingPE
	}
	return 0
}

func (x *YahooQuote) GetTrailingAnnualDividendYield() float64 {
	if x != nil {
		return x.TrailingAnnualDividendYield
	}
	return 0
}

func (x *YahooQuote) GetEpsTrailingTwelveMonths() float64 {
	if x != nil {
		return x.EpsTrailingTwelveMonths
	}
	return 0
}

func (x *YahooQuote) GetEpsForward() float64 {
	if x != nil {
		return x.EpsForward
	}
	return 0
}

func (x *YahooQuote) GetEpsCurrentYear() float64 {
	if x != nil {
		return x.EpsCurrentYear
	}
	return 0
}

func (x *YahooQuote) GetPriceEpsCurrentYear() float64 {
	if x != nil {
		return x.PriceEpsCurrentYear
	}
	return 0
}

func (x *YahooQuote) GetSharesOutstanding() uint64 {
	if x != nil {
		return x.SharesOutstanding
	}
	return 0
}

func (x *YahooQuote) GetBookValue() float64 {
	if x != nil {
		return x.BookValue
	}
	return 0
}

func (x *YahooQuote) GetFiftyDayAverage() float64 {
	if x != nil {
		return x.FiftyDayAverage
	}
	return 0
}

func (x *YahooQuote) GetFiftyDayAverageChange() float64 {
	if x != nil {
		return x.FiftyDayAverageChange
	}
	return 0
}

func (x *YahooQuote) GetFiftyDayAverageChangePercent() float64 {
	if x != nil {
		return x.FiftyDayAverageChangePercent
	}
	return 0
}

func (x *YahooQuote) GetTwoHundredDayAverage() float64 {
	if x != nil {
		return x.TwoHundredDayAverage
	}
	return 0
}

func (x *YahooQuote) GetTwoHundredDayAverageChange() float64 {
	if x != nil {
		return x.TwoHundredDayAverageChange
	}
	return 0
}

func (x *YahooQuote) GetTwoHundredDayAverageChangePercent() float64 {
	if x != nil {
		return x.TwoHundredDayAverageChangePercent
	}
	return 0
}

func (x *YahooQuote) GetMarketCap() uint64 {
	if x != nil {
		return x.MarketCap
	}
	return 0
}

func (x *YahooQuote) GetForwardPE() float64 {
	if x != nil {
		return x.ForwardPE
	}
	return 0
}

func (x *YahooQuote) GetPriceToBook() float64 {
	if x != nil {
		return x.PriceToBook
	}
	return 0
}

func (x *YahooQuote) GetSourceInterval() uint32 {
	if x != nil {
		return x.SourceInterval
	}
	return 0
}

func (x *YahooQuote) GetExchangeDataDelayedBy() uint32 {
	if x != nil {
		return x.ExchangeDataDelayedBy
	}
	return 0
}

func (x *YahooQuote) GetPageViewGrowthWeekly() float64 {
	if x != nil {
		return x.PageViewGrowthWeekly
	}
	return 0
}

func (x *YahooQuote) GetAverageAnalystRating() string {
	if x != nil {
		return x.AverageAnalystRating
	}
	return ""
}

func (x *YahooQuote) GetTradeable() bool {
	if x != nil {
		return x.Tradeable
	}
	return false
}

func (x *YahooQuote) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *YahooQuote) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *YahooQuote) GetLongName() string {
	if x != nil {
		return x.LongName
	}
	return ""
}

func (x *YahooQuote) GetMessageBoardId() string {
	if x != nil {
		return x.MessageBoardId
	}
	return ""
}

func (x *YahooQuote) GetExchangeTimezoneName() string {
	if x != nil {
		return x.ExchangeTimezoneName
	}
	return ""
}

func (x *YahooQuote) GetExchangeTimezoneShortName() string {
	if x != nil {
		return x.ExchangeTimezoneShortName
	}
	return ""
}

func (x *YahooQuote) GetGmtOffSetMilliseconds() int32 {
	if x != nil {
		return x.GmtOffSetMilliseconds
	}
	return 0
}

func (x *YahooQuote) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *YahooQuote) GetEsgPopulated() bool {
	if x != nil {
		return x.EsgPopulated
	}
	return false
}

func (x *YahooQuote) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *YahooQuote) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type YahooQuoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuoteResponse *YahooQuoteResponse_QuoteResponse `protobuf:"bytes,1,opt,name=quoteResponse,proto3" json:"quoteResponse,omitempty"`
}

func (x *YahooQuoteResponse) Reset() {
	*x = YahooQuoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YahooQuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YahooQuoteResponse) ProtoMessage() {}

func (x *YahooQuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YahooQuoteResponse.ProtoReflect.Descriptor instead.
func (*YahooQuoteResponse) Descriptor() ([]byte, []int) {
	return file_tb_proto_rawDescGZIP(), []int{2}
}

func (x *YahooQuoteResponse) GetQuoteResponse() *YahooQuoteResponse_QuoteResponse {
	if x != nil {
		return x.QuoteResponse
	}
	return nil
}

type YahooQuoteResponse_QuoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*YahooQuote `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *YahooQuoteResponse_QuoteResponse) Reset() {
	*x = YahooQuoteResponse_QuoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YahooQuoteResponse_QuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YahooQuoteResponse_QuoteResponse) ProtoMessage() {}

func (x *YahooQuoteResponse_QuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YahooQuoteResponse_QuoteResponse.ProtoReflect.Descriptor instead.
func (*YahooQuoteResponse_QuoteResponse) Descriptor() ([]byte, []int) {
	return file_tb_proto_rawDescGZIP(), []int{2, 0}
}

func (x *YahooQuoteResponse_QuoteResponse) GetResult() []*YahooQuote {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_tb_proto protoreflect.FileDescriptor

var file_tb_proto_rawDesc = []byte{
	0x0a, 0x08, 0x74, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x74, 0x62, 0x22, 0x2d,
	0x0a, 0x05, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x62, 0x2e, 0x59, 0x61, 0x68, 0x6f,
	0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x22, 0xae, 0x1b,
	0x0a, 0x0a, 0x59, 0x61, 0x68, 0x6f, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x44, 0x69, 0x73, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x44, 0x69, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x48, 0x69, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x48, 0x69,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x17, 0x70, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x70, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70,
	0x6f, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x1a,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x1a, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x79, 0x48, 0x69,
	0x67, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x79, 0x48, 0x69, 0x67, 0x68, 0x12, 0x34,
	0x0a, 0x15, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44,
	0x61, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x79, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x79, 0x4c, 0x6f, 0x77, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x44, 0x61, 0x79, 0x4c, 0x6f, 0x77, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x72, 0x65, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73,
	0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x61, 0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62,
	0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x75, 0x6c, 0x6c,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x18, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x33, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x17, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x30, 0x44, 0x61, 0x79, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x31, 0x30, 0x44, 0x61, 0x79, 0x12, 0x34,
	0x0a, 0x15, 0x66, 0x69, 0x66, 0x74, 0x79, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x4c, 0x6f,
	0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x66,
	0x69, 0x66, 0x74, 0x79, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x4c, 0x6f, 0x77, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x66, 0x69, 0x66, 0x74, 0x79, 0x54, 0x77, 0x6f,
	0x57, 0x65, 0x65, 0x6b, 0x4c, 0x6f, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x66, 0x69, 0x66, 0x74,
	0x79, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x4c, 0x6f, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x69, 0x66, 0x74,
	0x79, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x66, 0x74, 0x79, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65,
	0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x66, 0x69, 0x66, 0x74, 0x79, 0x54,
	0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x48, 0x69, 0x67, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x66, 0x69, 0x66, 0x74, 0x79, 0x54, 0x77, 0x6f,
	0x57, 0x65, 0x65, 0x6b, 0x48, 0x69, 0x67, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x44,
	0x0a, 0x1d, 0x66, 0x69, 0x66, 0x74, 0x79, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x48, 0x69,
	0x67, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x66, 0x69, 0x66, 0x74, 0x79, 0x54, 0x77, 0x6f, 0x57,
	0x65, 0x65, 0x6b, 0x48, 0x69, 0x67, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x66, 0x74, 0x79, 0x54, 0x77, 0x6f,
	0x57, 0x65, 0x65, 0x6b, 0x4c, 0x6f, 0x77, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x66,
	0x69, 0x66, 0x74, 0x79, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x4c, 0x6f, 0x77, 0x12, 0x2a,
	0x0a, 0x10, 0x66, 0x69, 0x66, 0x74, 0x79, 0x54, 0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x48, 0x69,
	0x67, 0x68, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x66, 0x69, 0x66, 0x74, 0x79, 0x54,
	0x77, 0x6f, 0x57, 0x65, 0x65, 0x6b, 0x48, 0x69, 0x67, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x16,
	0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x6e, 0x64, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x45, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x74, 0x72,
	0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x50, 0x45, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x45, 0x12, 0x40, 0x0a, 0x1b, 0x74, 0x72, 0x61, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x64, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x74,
	0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x64, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x65, 0x70,
	0x73, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x65, 0x70, 0x73,
	0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x70, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x65, 0x70, 0x73, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x70, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x70,
	0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x12, 0x30, 0x0a, 0x13,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x45, 0x70, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x59,
	0x65, 0x61, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x45, 0x70, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69,
	0x66, 0x74, 0x79, 0x44, 0x61, 0x79, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x66, 0x69, 0x66, 0x74, 0x79, 0x44, 0x61, 0x79, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x69, 0x66, 0x74, 0x79, 0x44, 0x61, 0x79,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x15, 0x66, 0x69, 0x66, 0x74, 0x79, 0x44, 0x61, 0x79, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x66, 0x69,
	0x66, 0x74, 0x79, 0x44, 0x61, 0x79, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x1c, 0x66, 0x69, 0x66, 0x74, 0x79, 0x44, 0x61, 0x79, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x14, 0x74, 0x77, 0x6f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x44, 0x61, 0x79, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x74, 0x77,
	0x6f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x44, 0x61, 0x79, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x74, 0x77, 0x6f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64,
	0x44, 0x61, 0x79, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x3a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x74, 0x77, 0x6f, 0x48, 0x75, 0x6e, 0x64, 0x72,
	0x65, 0x64, 0x44, 0x61, 0x79, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x4c, 0x0a, 0x21, 0x74, 0x77, 0x6f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64,
	0x44, 0x61, 0x79, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x21, 0x74,
	0x77, 0x6f, 0x48, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x44, 0x61, 0x79, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x50, 0x45, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x50, 0x45, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x18, 0x3e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x42, 0x79, 0x12, 0x32, 0x0a, 0x14,
	0x70, 0x61, 0x67, 0x65, 0x56, 0x69, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x57, 0x65,
	0x65, 0x6b, 0x6c, 0x79, 0x18, 0x41, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x61, 0x67, 0x65,
	0x56, 0x69, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79,
	0x12, 0x32, 0x0a, 0x14, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x74, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x44,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x14, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x7a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x67, 0x6d, 0x74, 0x4f, 0x66, 0x66, 0x53, 0x65, 0x74, 0x4d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x4a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x15, 0x67, 0x6d, 0x74, 0x4f, 0x66, 0x66, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x73, 0x67, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x4c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x73, 0x67, 0x50, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x99,
	0x01, 0x0a, 0x12, 0x59, 0x61, 0x68, 0x6f, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74,
	0x62, 0x2e, 0x59, 0x61, 0x68, 0x6f, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0d, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x1a, 0x37, 0x0a, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x62, 0x2e, 0x59, 0x61, 0x68, 0x6f, 0x6f, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tb_proto_rawDescOnce sync.Once
	file_tb_proto_rawDescData = file_tb_proto_rawDesc
)

func file_tb_proto_rawDescGZIP() []byte {
	file_tb_proto_rawDescOnce.Do(func() {
		file_tb_proto_rawDescData = protoimpl.X.CompressGZIP(file_tb_proto_rawDescData)
	})
	return file_tb_proto_rawDescData
}

var file_tb_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_tb_proto_goTypes = []interface{}{
	(*Stock)(nil),                            // 0: tb.Stock
	(*YahooQuote)(nil),                       // 1: tb.YahooQuote
	(*YahooQuoteResponse)(nil),               // 2: tb.YahooQuoteResponse
	(*YahooQuoteResponse_QuoteResponse)(nil), // 3: tb.YahooQuoteResponse.QuoteResponse
}
var file_tb_proto_depIdxs = []int32{
	1, // 0: tb.Stock.quote:type_name -> tb.YahooQuote
	3, // 1: tb.YahooQuoteResponse.quoteResponse:type_name -> tb.YahooQuoteResponse.QuoteResponse
	1, // 2: tb.YahooQuoteResponse.QuoteResponse.result:type_name -> tb.YahooQuote
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_tb_proto_init() }
func file_tb_proto_init() {
	if File_tb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YahooQuote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YahooQuoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YahooQuoteResponse_QuoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tb_proto_goTypes,
		DependencyIndexes: file_tb_proto_depIdxs,
		MessageInfos:      file_tb_proto_msgTypes,
	}.Build()
	File_tb_proto = out.File
	file_tb_proto_rawDesc = nil
	file_tb_proto_goTypes = nil
	file_tb_proto_depIdxs = nil
}
